<?xml version="1.0" encoding="UTF-8" ?>
<discocomponent>
    <properties>
        <!-- these properties can be set over HTTP parameters as well; they will be inserted automatically -->
        <property name="staticoutput" value="false" />
		<property name="property" value="something else" />
        <property name="included" value="false" />
		<property name="outputtype" value="append" />
		<property name="state" />
    </properties>

	<dependencies state="start">
		<dependency name="heat" state="start">
			<variable name="slavecount" />
			<variable name="mastername" />
			<variable name="slavename" />
		</dependency>
	</dependencies>

    <dependencies state="end">
        <dependency name="shell" state="start">

        </dependency>
    </dependencies>

	<functions>
		<file path="shellfunctions.py"></file>
	</functions>

	<globaloutput />
    <output />
	<outputfirst><![CDATA[<shell>
#!/bin/bash

# NOTE about this bash file: this file will be used to setup the distributed
# computing cluster on OpenStack. This includes copying the actual application
# frameworks from an external cinder volume to each master/slave and writing
# the configuration files to each of them. The parameters within dollar signs
# (e.g. /home/ubuntu) will be filled by the service orchestrator (so.py) with
# either given values from the user, default settings either from file
# defaultSettings.cfg / assumptions within the serice orchestrator or with
# pre-defined configuration files within the /data directory of the SO bundle.

mkdir -p /home/ubuntu/webserver/components

{
SECONDS=0

#
cd /home/ubuntu/webserver
python -m SimpleHTTPServer 8084 &
cd /home/ubuntu

state=0

function setState() {
  echo $state > /home/ubuntu/webserver/status.log
  let "state += 1"
}

function deploymentLog() {
  echo $1 >> /home/ubuntu/webserver/deployment.log
}

# this function deploys the given directory on the local webserver - mainly for accessing the log files
function componentlogdir {
    mkdir "/home/ubuntu/webserver/components/$1"
    sudo mount --bind "$2" "/home/ubuntu/webserver/components/$1"
}

# state 1
setState

# solve problem with not correctly configured locale...
echo -e "LC_ALL=en_US.UTF-8\nLANG=en_US.UTF-8" >> /etc/environment

# serve deployment.log
#sh -c "while true; do nc -l -p 8084 < /home/ubuntu/deployment.log; done" > /dev/null 2>&1 &

# monitoring from the outside that setup has started
echo "0" > /home/ubuntu/webserver/progress.log
#sh -c "while true; do nc -l -p 6088 < /home/ubuntu/progress.log; done" > /dev/null 2>&1 &


# disable IPv6 as Hadoop won't run on a system with it activated
deploymentLog "disabling IPv6"
echo -e "\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\nnet.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf
sysctl -p

# disable transparent hugepage
echo never > /sys/kernel/mm/transparent_hugepage/enabled

# setup master's SSH configuration
su ubuntu -c 'echo -e "$sshprivatekey$" > /home/ubuntu/.ssh/id_rsa'
su ubuntu -c 'echo -e "$sshpublickey$" > /home/ubuntu/.ssh/id_rsa.pub'
su ubuntu -c "cat /home/ubuntu/.ssh/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys"

su ubuntu -c 'echo -e "Host *\n   StrictHostKeyChecking no\n   UserKnownHostsFile=/dev/null" > /home/ubuntu/.ssh/config'
chmod 0600 /home/ubuntu/.ssh/*

# copying Hadoop & Java on the master and install them (including setting the
# environment variables)
cd /root

mkdir /home/ubuntu/archives

deploymentLog "setting up files for deployment on slaves..."

cat - >> /root/bashrc.suffix <<'EOF'
export JAVA_HOME=/usr/lib/java/jdk
export PATH=$PATH:$JAVA_HOME/bin
export HADOOP_HOME=/usr/lib/hadoop/hadoop
export PATH=$PATH:$HADOOP_HOME/bin
EOF

# configure Hadoop
# first of all, let's create the config files for the slaves
mkdir /home/ubuntu/hadoopconf
mv /root/bashrc.suffix /home/ubuntu/hadoopconf

# creating /etc/hosts file's replacement - don't forget: slaves need to have
# the same name as configured with Heat Template!!!
echo -e "127.0.0.1\tlocalhost\n`/sbin/ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}'`  $mastername$" > /root/hosts.replacement
cat - >> /root/hosts.replacement <<'EOF'
]]></outputfirst>

<outputsecond><![CDATA[
86.119.37.182   reposerver
EOF
mv -f /root/hosts.replacement /home/ubuntu/hadoopconf

cp /home/ubuntu/hadoopconf/hosts.replacement /etc/hosts

# copy pssh/pscp to /usr/bin/pssh on master
# originally from Git repo https://github.com/jcmcken/parallel-ssh
# cp -r /mnt/pssh/pssh /usr/bin/
apt-get update
#apt-get install -y pssh # git

# install pssh from repository
cd /home/ubuntu
su ubuntu -c "wget http://reposerver/pssh/pssh.tar.gz"
su ubuntu -c "tar -xzf pssh.tar.gz"
dpkg -i /home/ubuntu/pssh/*


cat - > /home/ubuntu/hosts.lst << 'EOF'
127.0.0.1
]]></outputsecond>

<outputthird><![CDATA[EOF


# disable transparent hugepage
su ubuntu -c "parallel-ssh -h /home/ubuntu/hosts.lst \"sudo sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'\""

# install ambari
# cd /etc/apt/sources.list.d
# wget http://public-repo-1.hortonworks.com/ambari/ubuntu14/2.x/updates/2.2.0.0/ambari.list
# apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B9733A7A07513CAD
# apt-get update
# apt-get install -y ambari-server
# ambari-server setup
# ambari-server start

su ubuntu -c "parallel-scp -h /home/ubuntu/hosts.lst /home/ubuntu/hadoopconf/hosts.replacement /home/ubuntu"
su ubuntu -c "parallel-ssh -h /home/ubuntu/hosts.lst \"sudo mv -f /home/ubuntu/hosts.replacement /etc/hosts\""



mkdir /home/ubuntu/downloaded
cd /home/ubuntu/downloaded

cd /home/ubuntu/downloaded

setState

#wget --no-cookies --no-check-certificate --header "Cookie: oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u74-b02/jdk-8u74-linux-x64.tar.gz" -O jdk-8-linux-x64.tar.gz
wget http://reposerver/java/jdk-8-linux-x64.tar.gz

deploymentLog "copying JDK to slaves"

su ubuntu -c "parallel-scp -h /home/ubuntu/hosts.lst /home/ubuntu/downloaded/jdk-8-linux-x64.tar.gz /home/ubuntu"

deploymentLog "unpacking jdk"

su ubuntu -c "parallel-ssh -t 2000 -h /home/ubuntu/hosts.lst \"tar -xzf /home/ubuntu/jdk-8-linux-x64.tar.gz\""

deploymentLog "setting up JDK"

su ubuntu -c "parallel-ssh -h /home/ubuntu/hosts.lst \"sudo mkdir -p /usr/lib/java\""
su ubuntu -c "parallel-ssh -h /home/ubuntu/hosts.lst \"sudo mv /home/ubuntu/jdk1.8.0_74/ /usr/lib/java/\""
su ubuntu -c "parallel-ssh -h /home/ubuntu/hosts.lst \"sudo ln -s /usr/lib/java/jdk1.8.0_74/ /usr/lib/java/jdk\""

deploymentLog "JDK setup finished"
# state 3
setState




]]></outputthird>



<outputend><![CDATA[

duration=$SECONDS
# save it into deployment.log...
deploymentLog "deployment took me $duration seconds"
# ...and into debug.log
echo "deployment took me $duration seconds"

deploymentLog `date`

# state 8
setState

# everything has been setup
echo "1" > /home/ubuntu/webserver/progress.log

# in the following line, the whole regular output will be redirected to the
# file debug.log in the user's home directory and the error output to the file
# error.log within the same directory
} 2> /home/ubuntu/webserver/error.log | tee /home/ubuntu/webserver/debug.log</shell>
]]></outputend>

</discocomponent>
