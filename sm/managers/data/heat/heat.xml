<?xml version="1.0" encoding="UTF-8" ?>
<discocomponent>
  <!--
  find out external ip address: curl http://169.254.169.254/latest/meta-data/public-ipv4 (goes over local nova server)
  -->
    <properties>
        <!-- these properties can be set over HTTP parameters as well; they will be inserted automatically -->
        <property name="staticoutput" value="false" />
		<property name="slavecount" />
        <property name="included" value="false" />
		<property name="outputtype" value="replace" />
        <property name="masterimage" />
        <property name="slaveimage" />
        <property name="masterflavor" />
        <property name="slaveflavor" />
        <property name="mastername" />
        <property name="slavename" />
        <property name="externalnetworkname" />
        <property name="networkname" />
    </properties>

    <dependencies state="end">

        <dependency name="shell" state="end">
            <variable name="fake" />
        </dependency>

		<dependency name="heat" state="start">
			<variable name="fw2baz" />
			<variable name="fw2foobar" />
		</dependency>
	</dependencies>

    <globaloutput />

	<functions>
        <file path="heatfunctions.py" />
	</functions>

<slavetemplate><![CDATA[############### slave $slavenumber$ ################
  disco_slave_port_$slavenumber$:
    type: OS::Neutron::Port
    properties:
      name: disco_slave_port_$slavenumber$
      network: { get_resource: disco_network }
      fixed_ips:
        - subnet_id: { get_resource: disco_subnet }
      security_groups: [{ get_resource: disco_sec_group }]

  disco_slave_$slavenumber$:
    type: OS::Nova::Server
    properties:
      image: { get_param: slave_image }
      flavor: { get_param: slave_flavor }
      name: { list_join: ["-", [{ get_param: slave_name },"$slavenumber$"]] }
      key_name: { get_resource: sshkey }
      networks:
        - port: { get_resource: disco_slave_port_$slavenumber$ }
      user_data_format: RAW

############### end slave $slavenumber$ ##############

]]></slavetemplate>
		<outputtemplate><![CDATA[
############### external connection ##############

  hadoop_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: "public"


  disco_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network_name }

# the disposal problem could be solved with a depends_on: here - see bug https://bugs.launchpad.net/heat/+bug/1299259 ; see also https://review.openstack.org/#/c/115336/ or https://bugs.launchpad.net/murano/+bug/1356721
# https://translate.google.com/translate?sl=auto&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=http%3A%2F%2Fhabrahabr.ru%2Fcompany%2Fselectel%2Fblog%2F247307%2F&amp;edit-text=&amp;act=url
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: disco_router }
      subnet_id: { get_resource: disco_subnet }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: hadoop_ip }
      port_id: { get_resource: disco_port }



############### end external connection ##############

outputs:
  external_ip:
    description: The IP address of the deployed master node
    value: { get_attr: [ hadoop_ip, floating_ip_address ] }

  ssh_key_name:
    description: The name of the keypair.
    value:
        str_replace:
          params:
            __id__: { get_param: "OS::stack_name" }
          template: disco_sshkey-__id__

  ssh_public_key:
    description: The public key of the keypair.
    value: { get_attr: [sshkey, public_key] }

  ssh_private_key:
    description: The private key of the keypair.
    value: { get_attr: [sshkey, private_key] }]]></outputtemplate>

  <parameterssection><![CDATA[heat_template_version: 2014-10-16

parameters:
  master_image:
    type: string
    description: Which image should be the master's os setup with?
    default: $masterimage$

  slave_image:
    type: string
    description: Which image should be the slave's os setup with?
    default: $slaveimage$

  master_flavor:
    type: string
    description: Flavor of the master's instance
    default: $masterflavor$

  slave_flavor:
    type: string
    description: Flavor of the master's instance
    default: $slaveflavor$

  master_name:
    type: string
    description: master's name
    default: $mastername$

  slave_name:
    type: string
    description: slave's name (the index will be appended at the end)
    default: $slavename$

  cluster_subnet_cidr:
    type: string
    description: CIDR of subnet that cluster is going to use
    default: 192.168.19.0/24

  subnet_gateway_ip:
    type: string
    description: subnet's gateway's IP
    default: 192.168.19.1

  allocation_pool_start:
    type: string
    description: allocation pool's starting IP address
    default: 192.168.19.2

  allocation_pool_end:
    type: string
    description: allocation pool's last IP address
    default: 192.168.19.254

  subnet_dns_nameservers:
    type: comma_delimited_list
    description: nameservers for the used subnet
    default: ["8.8.8.8","8.8.4.4"]

  external_network_name:
    type: string
    description: name of the external network connection (network name)
    default: $externalnetworkname$

  network_name:
    type: string
    description: name of the newly created SDN network
    default: $networkname$

  ]]></parameterssection>
  <resourcessection><![CDATA[
resources:
############### network ##############
  sshkey:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          params:
            __id__: { get_param: "OS::stack_name" }
          template: disco_sshkey-__id__
      save_private_key: true

  disco_sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: security_group_-5a0014ab-b56c-11e6-8fca-34363b7e7806
      rules: [
      {"direction":"ingress","protocol":"tcp","port_range_min":"22","port_range_max":"22"},
      {"direction":"ingress","protocol":"tcp","port_range_min":"8025","port_range_max":"8088"},
      {"direction":"ingress","protocol":"tcp","port_range_min":"34342","port_range_max":"34342"},
      {"direction":"ingress","protocol":"tcp","port_range_min":"50010","port_range_max":"50105"},
      {"direction":"ingress","protocol":"tcp","port_range_min":"54310","port_range_max":"54310"},
      {"direction":"ingress","protocol":"icmp"},
      {"direction":"ingress"}, # this setting is just for testing purposes
      {"direction":"egress"} # this setting is just for testing purposes
      ]

  disco_network:
    type: OS::Neutron::Net
    properties:
      name: { get_param: network_name }

  disco_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: disco_network }
      cidr: { get_param: cluster_subnet_cidr }
      gateway_ip: { get_param: subnet_gateway_ip }
      dns_nameservers: { get_param: subnet_dns_nameservers }
      allocation_pools:
        - start: { get_param: allocation_pool_start }
          end: { get_param: allocation_pool_end }

############### end network ##############

############### master ################

  disco_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: disco_network }
      fixed_ips:
        - subnet_id: { get_resource: disco_subnet }
      security_groups: [{ get_resource: disco_sec_group }]

  disco_master:
    type: OS::Nova::Server
    properties:
      name: { get_param: master_name }
      image: { get_param: master_image }
      flavor: { get_param: master_flavor }
      key_name: { get_resource: sshkey }
      networks:
        - port: { get_resource: disco_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |]]></resourcessection>

    <output />
</discocomponent>
